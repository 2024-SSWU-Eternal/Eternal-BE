# github repository actions 페이지에 나타날 이름
name: CI/CD for Eternal-BE with Github Actions & AWS CodeDeploy

# event trigger
# main 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # JDK 설정 - Github Actions에서 사용할 JDK 설정 (JDK 17)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle 실행 권한 추가
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # gradle 캐싱 - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 properties 파일 생성 - application.properties
      - name: Create application.properties
        run: |
          mkdir -p ./src/main/resources # resources 폴더 생성
          cd ./src/main/resources # resources 폴더로 이동
          touch ./application.properties # application.properties 생성
          echo "spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect" >> ./application.properties
          echo "spring.datasource.url=${{ secrets.MYSQL_URL }}" >> ./application.properties
          echo "spring.datasource.username=${{ secrets.MYSQL_USERNAME }}" >> ./application.properties
          echo "spring.datasource.password=${{ secrets.MYSQL_PASSWORD }}" >> ./application.properties
          echo "cloud.aws.credentials.accessKey=${{ secrets.AWS_ACCESS_KEY }}" >> ./application.properties
          echo "cloud.aws.credentials.secretKey=${{ secrets.AWS_SECRET_KEY }}" >> ./application.properties
          echo "cloud.aws.s3.bucketName=${{ secrets.AWS_S3_BUCKET_NAME }}" >> ./application.properties
          echo "cloud.aws.region.static=ap-northeast-2" >> ./application.properties
          echo "cloud.aws.stack.auto=${{ secrets.AWS_STACK_AUTO }}" >> ./application.properties
          echo "mailgun.api.key=${{ secrets.MAILGUN_API_KEY }}" >> ./application.properties
          echo "mailgun.domain=sandbox4599788fa3704b3e948eebd85271cf01.mailgun.org" >> ./application.properties 
          echo "mailgun.from=${{ secrets.MAILGUN_FROM }}" >> ./application.properties
        shell: bash

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # zip 파일 생성
      - name: Make zip file
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      # AWS 사용자 정보 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3에 zip 파일 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/deploy/$GITHUB_SHA.zip

      # AWS CodeDeploy에 배포 요청
      - name: Code Deploy
        run: |
          aws deploy create-deployment \
          --application-name ${{ secrets.CODE_DEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},bundleType=zip,key=deploy/$GITHUB_SHA.zip
